Next Word Prediction
========================================================
author: Florian Dollak
date: 2018-08-21
autosize: true

This app is part of the Coursera Data Science Specialization Capstone Project as offered by the Johns Hopkins University.

The goal of this app is to predict the next word in a string, based on some text input. 

The Data
========================================================

In order to create a comprehensive language model, I've used 80% of the [HC Corpora](https://d396qusza40orc.cloudfront.net/dsscapstone/dataset/Coursera-SwiftKey.zip) dataset and also the full [OANC](http://www.anc.org/) corpus to get a good representation of american english as it is used on the internet and in everyday language.

```{r, echo=FALSE}
library(knitr)
load("files_en")
kable(files_en)
```

Currently, the focus was exclusively on (american) english, but the general framework can be easily adapted to accomodate other languages as well.

The Algorithm
========================================================

Over the course of development I have implemented various smoothing and discounting techniques to prepare the data properly for prediction. Among the implemented methods were:

* Absolute Discounting
* Good Turing Discounting
* Katz Backoff Smoothing
* (Modified) Kneser-Ney Smoothing
* Stupid BackOff

In the end I decided to increase the amount of data and implement the Stupid Backoff method because the processing and memory load is low and the loss in accurcy is negligible for large amounts of data, compared to modified Kneser-Ney which is considered one of the most efficient smoothing algorithms.

The App
========================================================

My overall design goal for [this app](https://floweffect.shinyapps.io/Next_Word_Prediction/)  was to create a lightweight, fast and memory efficient app that is flexible enough to be displayed properly on a wide range of devices.

![](appexample.png)

All you have to do is enter a piece of text into the text field, press the button and the app produces the three most likely predictions based on the text and the underlying model. Since common words seem slightly overrepresented some of the time, I have also added the top three prediction which are not stopwords, like "the", "is" or "at".

Additional Information & Links
========================================================

For reference, you can find:

* the app here [https://floweffect.shinyapps.io/Next_Word_Prediction/](https://floweffect.shinyapps.io/Next_Word_Prediction/)
* my github page for the capstone project here [https://github.com/FloWEffect/CCP](https://github.com/FloWEffect/CCP)
* and finally the link to this presentation [http://rpubs.com/FloWEffect/Capstone](http://rpubs.com/FloWEffect/Capstone)

Last but not least I want to thank all my fellow students for their insight and feedback, the mentors for their time and effort and lastly the creators of this course. I've learned quite a few new things and was able to revisit some stuff I've already learned at some point in my life.